// Code generated by go-bindata.
// sources:
// templates/additionalpropertiesserializer.gotmpl
// templates/docstring.gotmpl
// templates/header.gotmpl
// templates/model.gotmpl
// templates/modelvalidator.gotmpl
// templates/schema.gotmpl
// templates/schemabody.gotmpl
// templates/schematype.gotmpl
// templates/schemavalidator.gotmpl
// templates/structfield.gotmpl
// templates/swagger_json_embed.gotmpl
// templates/tuplefield.gotmpl
// templates/tupleserializer.gotmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAdditionalpropertiesserializerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x8f\xe3\x44\x14\xbc\xfb\x57\x14\x91\xd8\xb5\x91\x71\x48\xf6\xb6\x10\xa4\x45\xe2\x00\xd2\x0e\x68\x07\xb8\x44\x39\x74\xec\xe7\xa4\x67\xec\x6e\xd3\xdd\xf1\x30\x58\xfe\xef\xa8\x3f\x26\x76\x06\x3b\x9a\x8f\xd3\xd8\xee\xae\x57\x55\xef\xbd\x4a\xd7\xa1\xa0\x92\x0b\xc2\x82\x15\x05\x37\x5c\x0a\x56\xfd\xae\x64\x43\xca\x70\xd2\xb7\xa4\x38\xab\xf8\xbf\xa4\x16\xe8\xfb\x68\xb9\xc4\x9f\xa2\x66\x4a\x1f\x59\xf5\xeb\xed\x6f\x37\x38\x3d\x3d\x69\x98\x23\xd7\x90\xfb\x3b\xca\x0d\x1e\xb8\x39\x62\xc0\x43\x73\x06\x44\xa9\x64\x0d\x7b\x37\x2a\x4f\x22\x47\xdc\x75\xd9\x17\xca\x89\xb7\xa4\x6e\x58\x4d\x7d\x8f\x6f\xba\x0e\x0d\xd3\xb9\xab\x8b\xcc\xbe\x45\xdf\x27\x97\x95\xe3\x82\x19\x86\xed\x6e\xff\x68\x28\x01\x29\x25\x15\xba\x08\x58\x2e\xa1\x0d\x3b\x10\x56\x29\xf6\x5c\x14\x30\x47\x1a\x95\x8f\x80\x96\x29\x7f\x64\x85\xae\x83\xa1\xba\xa9\x98\x21\x2c\x2c\x67\x79\x32\x9f\xce\xac\x7f\x92\xc5\xe3\x02\x99\xd5\x0d\xf0\xd2\x16\xc1\xc7\x0d\xee\xb4\x14\xd9\x99\x8b\xe3\x91\xe2\x9d\x47\x4c\xbe\x77\xa7\xbe\xda\x40\xf0\xca\xf1\x01\x14\x99\x93\x12\xf6\x7d\x04\xf4\x81\x80\xca\x5b\x4c\xca\x8c\x60\xdf\x2b\x26\x0e\x84\x6c\xe8\x83\xff\xa2\xf2\x36\x9b\xbc\x85\x4d\x90\x34\xfd\xd9\x83\x92\x28\xfc\xff\xd6\xe0\x0b\xd3\x3d\x82\xca\xdb\x68\xec\xe0\x3a\x85\xa2\x5a\xb6\x63\xff\xc0\x44\x61\x1b\x0b\x23\x51\xb3\x26\x82\x3f\xbb\xb6\xc6\xd4\xec\x9e\xe2\x9a\x35\x5b\x6d\x14\x17\x87\x5d\xd7\x59\xd7\xb2\x4f\x13\x63\x85\xbe\x77\x36\x7e\x61\x0f\x9f\x49\x6b\x76\x20\xcb\xaf\xd2\x96\x09\x17\x86\x54\xc9\x72\xea\xfa\x33\xe9\xe4\xa5\x1d\x58\xbf\xa0\x03\x57\x2d\x2e\xa8\x22\x43\xb1\x07\x4b\x5d\x8f\x14\x17\xa6\xc4\xe2\xeb\xbf\x17\xc3\x30\x5e\x38\xea\x1f\xae\x68\x1d\xbb\xfa\x21\x75\xfe\x4d\x2f\x47\xcb\xaa\x93\x1b\x52\x5e\xa2\x22\x11\x68\x24\xf8\x11\xdf\x9d\xb5\xe8\x53\x65\x66\xec\x1e\x86\x59\xe7\x47\xaa\xd9\x1f\x8f\x0d\x2d\x66\x59\x25\x0e\xb0\x94\x0a\xf7\x29\x5a\x0b\xe9\x3d\x09\x1d\xf5\xf5\xfc\xb8\x1a\x69\x39\xbf\xba\x42\x40\x98\xed\x5c\x6b\x0d\xe6\x25\x84\x34\xd3\x18\xd9\x2f\xfa\xe6\x54\x55\x6c\x5f\x59\xd7\xdf\x9d\x2d\x77\x7c\xa6\x5a\xfd\xbf\x76\xdb\xbf\x27\x1e\xde\xbb\xed\xfd\x0e\x1b\xaf\x28\x1a\xbe\xda\x95\xf8\xcb\xba\xff\xf3\x3f\x8d\x22\xad\xb9\x14\x61\x2b\xdc\xa5\xb0\xba\xc3\x94\x46\x57\xae\x78\x03\x9f\x8f\x48\xa0\x25\x78\x15\xf5\x91\x4d\xd2\xcf\xa3\x1c\x7d\x6d\x8a\x72\x61\x24\x98\xcb\xd1\x70\x7a\x36\x4e\x67\xd2\x74\x54\x3d\x4e\x10\xfb\x24\x4d\x7d\x92\x26\xce\xcd\xb7\x05\xe5\xfc\x6a\x5d\x4b\x28\x6c\x66\xec\x7c\xee\xe2\x72\xe9\x06\x7f\xac\xdc\x8f\xb0\x90\x0f\xe2\x32\xe8\xed\x83\x4e\x2f\x46\x2f\x88\x8e\x43\x5a\x0f\xa9\x32\x95\x17\x82\x57\xe9\x38\x34\xc2\x4e\x4e\xf3\x4c\xb0\xd9\x8c\x96\xd4\x01\x04\x02\xb6\xe3\x01\x62\x8e\xbd\xfd\x91\x9a\x6c\x74\x84\xd1\xfb\x69\x2d\x33\x7c\xde\xa4\xcd\x31\x4e\xf0\x03\x3e\x5c\x1e\x1f\x73\xb8\x94\x93\x4b\x91\x33\x43\xc2\x4e\x86\x55\xb1\x0e\xb2\xce\x0d\xd8\x0e\xb8\xdf\xae\xec\xe6\xbd\x4f\xdf\x0f\xdb\xc0\x9a\x86\x44\x11\x07\xa7\x86\x32\xdb\xd5\xc7\x5d\x96\x65\x49\x1a\xf6\x65\x98\x81\xff\x02\x00\x00\xff\xff\xca\xac\x90\xfb\xb1\x08\x00\x00")

func templatesAdditionalpropertiesserializerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAdditionalpropertiesserializerGotmpl,
		"templates/additionalpropertiesserializer.gotmpl",
	)
}

func templatesAdditionalpropertiesserializerGotmpl() (*asset, error) {
	bytes, err := templatesAdditionalpropertiesserializerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/additionalpropertiesserializer.gotmpl", size: 2225, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDocstringGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x31\x0a\xc3\x30\x0c\x45\x77\x9f\xe2\x93\xbd\xf1\x25\x3a\x77\xea\x05\x82\xad\xb4\x82\x58\x2e\xb1\xba\x54\xe8\xee\x25\x0d\x94\x24\x64\xfb\x88\xf7\x9e\xcc\x32\x8d\x2c\x84\x2e\xd7\xd4\x74\x66\x79\x74\xee\x01\x30\xbb\x80\x47\xf4\x77\xd6\x89\xe0\x6e\x86\x54\x4b\x21\xd1\xed\x6d\x65\xae\xd4\xd2\xcc\x2f\xe5\x2a\x70\x0f\x31\x86\x18\xb1\x15\x0e\xc0\xe2\x91\xe4\xff\x9c\x1a\x1d\x3b\xfb\x87\x67\xfe\x22\xfd\xa8\xe7\xbb\x0c\xc2\x1f\x42\x7f\x1b\x0a\x9d\xf5\xd7\xf9\x0d\x00\x00\xff\xff\xae\xbb\x3b\x77\xeb\x00\x00\x00")

func templatesDocstringGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDocstringGotmpl,
		"templates/docstring.gotmpl",
	)
}

func templatesDocstringGotmpl() (*asset, error) {
	bytes, err := templatesDocstringGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/docstring.gotmpl", size: 235, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeaderGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\xaf\xda\x30\x10\x84\xef\xfe\x15\xa3\x88\x4a\xad\xd4\xd8\xf7\x56\x3d\x01\x07\x2e\xe5\x1d\xf8\x03\x86\x6c\x1c\x8b\xc4\xce\x73\x36\xa0\x68\xe5\xff\xfe\x44\x02\x48\xa0\x77\xf2\x78\x67\xe7\xdb\x31\x06\xeb\x58\x11\x1c\x05\x4a\x96\xa9\xc2\x71\x82\x8b\xe5\x70\xb5\xce\x51\xfa\x8b\xcd\x1e\xff\xf7\x07\x6c\x37\xbb\x83\x56\x4a\x89\xc0\xd7\xd0\xeb\xd8\x4f\xc9\xbb\x86\x51\xe6\x6c\x0c\x44\x70\x8a\x5d\x47\x81\xdf\x3c\x11\x50\xa8\x90\xb3\x52\xaa\xb7\xa7\xb3\x75\x04\x11\xfd\xb1\xc8\xdb\xd8\x18\x1c\x1a\x3f\xa0\xf6\x2d\xe1\x6a\x87\xd7\x2a\xdc\x10\xee\x5d\xc0\x31\xb6\xfa\xb6\xbf\xad\x3c\xfb\xe0\xc0\xcf\x5c\x37\xdf\xeb\x53\xbc\x10\xea\x91\x67\x54\x43\x01\x53\x1c\x91\xa8\x4c\x63\x78\x21\x3d\x4e\xcc\xa5\x6d\xa8\x94\xf2\x5d\x1f\x13\xe3\xa7\x02\x06\x4e\x75\xc7\x28\x9c\xe7\x66\x3c\xea\x53\xec\x8c\x8b\x65\xec\x29\xd8\xde\x9b\xc5\x2d\x94\x88\xaf\x11\x13\xf4\x6e\x4e\x0e\xd0\x1b\xaa\xed\xd8\xf2\xe3\x9f\xb3\x02\x5c\x4c\x63\x60\xdf\x11\x8a\xbb\x28\x14\x20\x92\x6c\x70\xf4\x4d\x44\x04\x7d\xf2\x81\x6b\x14\x3f\x3e\x0b\xe8\x19\x22\x42\xa1\xba\xab\x25\xb8\x3a\xd3\xf4\x1b\xab\x8b\x6d\x47\xc2\x9f\x7f\xcf\x12\x33\xe0\x66\x22\x67\xbc\xb1\x96\xed\x17\xe0\xe3\xfd\xa5\xbe\x02\x00\x00\xff\xff\x78\xb1\x8a\x20\x07\x02\x00\x00")

func templatesHeaderGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeaderGotmpl,
		"templates/header.gotmpl",
	)
}

func templatesHeaderGotmpl() (*asset, error) {
	bytes, err := templatesHeaderGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/header.gotmpl", size: 519, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\xcd\x4e\xf3\x40\x0c\xbc\xf7\x29\x46\xb9\x37\xb9\x7f\xb7\x7e\xa2\x48\x3d\x80\x10\xf0\x02\x56\xd6\xa4\x2b\x6d\x76\xc3\x7a\x11\x05\x2b\xef\x8e\x92\x6e\xaa\x2d\x3f\x12\xaa\xb8\xd9\x1e\x7b\xec\x19\xab\x22\x71\x3f\x38\x4a\x8c\x6a\xcf\x64\x38\x56\xa8\x31\x8e\xab\x95\x2a\xec\x13\xea\x9d\x6f\xdd\x8b\xe1\x9b\x60\xd8\x4d\x75\x40\x75\x3d\x21\xfc\x8c\xfa\x96\x7a\x46\xb5\x19\xec\x3d\xcb\x10\xbc\x70\x85\x71\x6c\x1a\x6c\xee\x76\x4b\x05\x56\x90\xf6\x8c\xb8\xe4\x29\x80\xfc\xd4\x81\x96\x9c\xab\x33\x21\x3b\xe1\x23\xfd\x69\x41\xbd\x93\xed\x61\x08\x31\xb1\xc1\x3a\x43\x40\xd3\x40\x15\x03\x49\x4b\xce\xbe\x73\xbe\x61\x1c\x71\x26\xc5\x84\x56\x52\xb4\xbe\xcb\x6a\x8e\xb3\x99\xd8\x87\x34\x91\xff\x27\xe1\xc7\xb7\x61\x5e\xdb\x34\x90\x57\xea\x3a\x8e\xff\xfa\x59\xa9\xea\x89\xb9\x18\x5e\xae\x2c\xda\x8d\x95\x36\xda\xde\x7a\x4a\x21\x96\x63\x73\x7c\x55\xa2\xd7\x96\x9d\xf9\x44\xe8\x4d\xa9\x3a\xa7\x3f\x85\x85\x40\x69\xf7\xdc\x53\xf1\xab\x48\xbe\x63\xd4\xdb\x43\x8a\xf4\x30\x83\x72\xf6\xae\xd2\xcd\x23\xd9\x37\xdf\xbd\xd4\xdc\x8b\x8d\xfd\x53\x53\xbf\xda\xf6\x5b\x03\x55\x97\x9e\x8f\x00\x00\x00\xff\xff\xea\xef\x8c\xad\x11\x03\x00\x00")

func templatesModelGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelGotmpl,
		"templates/model.gotmpl",
	)
}

func templatesModelGotmpl() (*asset, error) {
	bytes, err := templatesModelGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/model.gotmpl", size: 785, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesModelvalidatorGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\xbd\x6e\xf2\x30\x14\xdd\xfd\x14\x47\x11\x9f\xf4\x55\x2a\xce\xde\xaa\x13\x30\xb0\x94\x0e\xbc\x80\x8b\x6f\x1c\x8b\xc4\x4e\x9d\x1b\x50\x64\xf9\xdd\x2b\x1b\x5a\x91\x6e\x57\x3e\xbf\x3e\x75\x8d\x8d\xd7\x04\x43\x8e\x82\x62\xd2\xf8\x9c\x61\xfc\x7a\xbc\x2a\x63\x28\xbc\x62\x7b\xc0\xfb\xe1\x88\xdd\x76\x7f\x94\x42\x88\x18\x61\x1b\xc8\x8d\x1f\xe6\x60\x4d\xcb\x58\xa7\x54\xd7\x88\x11\x27\xdf\xf7\xe4\xf8\x0f\x16\x23\xc8\x69\xa4\x24\x84\x18\xd4\xe9\xac\x0c\x21\x46\xf9\x71\x3b\xf3\x73\x5d\xe3\xd8\xda\x11\x8d\xed\x08\x57\x35\x2e\xab\x70\x4b\xb8\x77\x01\x7b\xdf\xc9\xcc\xdf\x69\xcb\xd6\x19\xf0\xaf\xae\x2f\x79\x43\xf0\x17\x42\x33\x71\xb1\x6a\xc9\x61\xf6\x13\x02\xad\xc3\xe4\x16\x4e\x3f\x11\xa5\xb4\x72\x5a\x08\xdb\x0f\x3e\x30\xfe\x0b\x20\xc6\xa0\x9c\x21\xc8\x2d\x35\x6a\xea\x78\x5f\xa0\x31\xff\x65\x08\xd6\x71\x83\xea\xdf\x57\x05\x99\x52\x21\x93\xd3\xf7\xeb\x26\x5b\x9d\x69\x7e\xc6\xea\xa2\xba\x89\xf0\xf2\x06\xf9\xa0\xcf\x58\x4a\x79\xad\x47\xa7\x1b\x77\x61\xf7\x54\x96\x66\xea\x87\x2e\xd7\xac\xc6\x53\x4b\xbd\xba\xa8\xce\x6a\xc5\xd6\xbb\xb1\x82\xcc\xa3\x7e\x07\x00\x00\xff\xff\xca\x6e\x42\x61\xbf\x01\x00\x00")

func templatesModelvalidatorGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesModelvalidatorGotmpl,
		"templates/modelvalidator.gotmpl",
	)
}

func templatesModelvalidatorGotmpl() (*asset, error) {
	bytes, err := templatesModelvalidatorGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/modelvalidator.gotmpl", size: 447, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemaGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6f\xdb\x38\x12\x7f\xd7\xa7\x98\x0b\xd2\x40\x0a\x1c\xf9\x10\xdc\x53\x0e\x79\x48\xda\xbb\xad\x17\x68\xbb\x48\xba\xdd\x87\xa0\xd8\xd2\xd2\x28\x66\x2b\x91\x0a\x49\x39\xf5\x0a\xfa\xee\x0b\x92\xfa\x6f\x49\xb6\x93\x62\xd1\x62\xf7\x4d\x96\x86\xc3\x99\xdf\xfc\xe1\x8f\xe3\x3c\x07\x1a\x81\xbf\x60\x41\x9c\x85\xf8\x86\x87\x18\xc3\x59\x51\x38\x00\xf6\x0b\x61\x21\xf8\x0b\x79\x4d\x24\xbe\xdf\xa4\xa8\x9f\xff\xf7\x35\xe5\x42\x61\xa8\xe5\x94\x7e\x97\xe7\x90\x12\x19\x90\x98\xfe\x81\xe0\xbf\x25\x09\x42\x51\x00\x65\x0a\x45\x44\x02\x84\xdc\x01\xd0\xfa\x68\x04\x5c\x80\x7f\x83\x0f\x19\x15\x18\x82\xff\x9a\xc8\x0f\x24\xa6\x21\x51\x94\x33\x09\x45\x21\x32\xa6\x68\x82\x7e\xf9\x96\x2c\x63\xcc\x73\x40\x16\x82\x31\xc9\x18\x25\x08\xbb\x47\xf0\xaf\xe2\xf8\x5d\x54\xbd\xae\xac\xf5\x17\xf2\x8a\x71\xb6\x49\x78\x26\x9b\x6f\xed\x65\xbf\x08\x9e\xa2\x50\x14\x3b\xdf\xab\xf5\xc7\xfe\x42\xbe\xcf\xd2\x58\x3b\x90\xe7\xa0\x30\x49\x63\xa2\x10\x8e\x94\x7e\x19\x51\x8c\xc3\x85\x76\xe9\x08\x7c\x2b\x81\xb1\xb4\xb2\x8d\xa8\x54\x22\x0b\xd4\x90\x6c\xe3\x46\xb9\xe3\xd6\x9b\x33\xe3\xc4\x6b\x22\xaf\xc2\x90\x6a\x50\x48\x3c\x6e\xb0\x15\x1e\x94\x3c\xeb\x88\x02\xcc\xe7\x46\xbe\x31\x32\xe4\x81\x54\x82\xb2\xfb\xa3\x11\x0d\x3d\x05\xdd\xd5\xa9\x95\xdb\x34\xc1\x7b\xc5\x83\xdb\x29\x7d\x45\xd1\xcb\x92\x21\xa1\x2a\x75\x5c\x0f\x12\x92\xde\x59\x03\x3f\x76\xe2\x20\x83\x15\x26\x44\x67\xe2\x5e\x86\xe7\x39\xb2\x70\x0b\xf3\xee\x8b\x2e\x88\x0b\x85\x49\x1f\xbf\x3d\xd1\xb3\x4b\xb7\x82\x74\x38\x6c\x46\xd1\x04\x62\xe6\x7b\x0b\xac\xbb\xbd\x30\xda\x32\xaf\x9f\x80\x4d\x3a\xb7\x45\xfc\x9f\xb8\x29\xfc\x8e\x58\xa7\x20\xeb\x5f\x79\xbe\x55\x64\x8d\x54\xaf\xba\x1a\x65\x3b\x8a\xcc\x19\x34\x6d\x77\xc1\x0d\x58\x57\x85\xbe\x0c\xfa\x8e\x32\xdb\xb3\xc0\x9e\x51\x5a\x3f\x5c\x51\x75\xe1\xec\x3c\x4f\x55\xd1\x53\xea\xe7\x3b\xad\x9c\xc6\xeb\xc2\x71\x00\xaa\xe3\x2f\x20\x09\x76\x4f\xbf\x01\xbd\xd7\x3c\xdc\x94\xb9\xe9\x4c\x1f\x49\x51\xc6\x02\x70\xf3\x1c\x8e\xfd\x1b\x0c\x90\xae\x51\x68\xbd\x45\x01\xa7\xed\xcd\x8e\x7d\xfb\xd6\x1b\x38\x81\x8d\x7b\xe3\xce\xe9\x13\xa9\x73\x72\xe2\x03\x1c\xfb\xaf\xa8\x0c\x04\x4d\x28\x23\x8a\x8b\xff\xeb\x82\xaa\x1d\x12\xa8\x32\xc1\xcc\x46\x82\x32\x15\xc1\xd1\x8b\x87\xa3\xfe\x92\x0f\x24\xce\xb0\x73\x30\x36\xcb\xba\xae\x40\x51\xf8\x79\xde\x85\xad\x28\xcc\x96\xed\x9e\xfd\x44\x38\x6e\x51\x0d\x22\xb2\x26\xf1\x34\x26\x1e\x74\x51\x61\x38\x8d\xca\x21\x7e\xc1\x25\xac\x49\xdc\xf7\xae\x5b\x46\x25\xe1\x72\x19\x57\x9a\xcb\x2c\x2a\x0a\xe5\x81\x3b\xc5\x9c\xbc\x56\x81\xf6\x9d\x5b\x5b\x31\x2e\xea\xb6\xd8\x6c\xe9\xcc\xe7\xf0\x2b\x4b\x88\x90\x2b\x6d\xd9\x00\x8b\xbb\x8d\x69\x80\x90\x55\x32\x12\x52\x1e\x6f\x12\x2e\xd2\x15\x0d\x40\xea\x8f\x12\x78\x34\xcc\x00\x1d\x13\xb7\x3d\xf4\xbb\x02\x49\x88\x02\x28\xf7\x6f\xcc\xd3\x0c\x02\xce\x64\x96\xa0\x80\x8a\x11\xbe\x2c\x5f\x78\xe0\x9a\xa2\xdd\x56\x35\x03\x14\x82\x0b\x1b\xc2\x35\x11\x80\x31\x26\xc8\x94\x84\xbb\x8f\x9f\x25\x67\xfe\x0d\x79\x7c\x83\x52\x92\x7b\x74\xc0\xa4\xbc\x10\x70\x71\x59\x6f\x55\x6d\x51\x5a\x33\x83\x93\x4a\x81\xf7\x5f\x23\xfb\xaf\x4b\x60\x34\x2e\x33\xa4\x4c\x6c\x46\x63\xb3\xaf\xa3\xa3\x59\xee\x2b\x50\x66\xb1\x82\x11\x33\x1d\x80\x88\x0b\xf8\x7d\x56\xd9\xa7\x6d\xb0\x9d\xa0\x36\xd8\x6e\xc1\x97\x9f\x67\x95\x91\xd9\x24\x8a\x6e\xb9\xb2\xc1\xcd\x33\x1a\x4a\x27\x3b\x86\x0f\x99\x5e\x15\x5a\x69\xf9\x25\x90\x34\x45\x16\xba\xf6\xf7\x4c\x5b\xe2\x39\x56\xa8\x5c\x0c\xd5\x27\x46\x63\xdd\x0a\x77\x67\xd2\x58\x12\x3d\x39\x75\x0e\xcc\x9a\xdd\x39\x33\x9f\xc3\x23\x02\x43\x0c\x41\x71\xd0\xda\x41\xad\xa8\x04\xf5\x48\x03\x9c\x81\xe4\x10\x51\x21\x95\xbe\xd8\x70\x20\xb0\xcc\xa2\x08\x35\x7a\xfa\xa2\x52\x07\x8a\xf2\x4c\xd1\xd8\x58\x74\x15\xc7\xa5\x8d\x9e\x33\x1c\x8b\xa1\x24\x6a\x20\xde\x11\x73\xbb\x6d\x13\xf0\xc2\xb1\xa8\xed\xb1\x0c\xee\x3e\x2e\x37\x0a\x9f\x0b\xd8\x32\x8b\xb4\xcb\x5a\x95\xf4\xdf\xe2\xe3\xb5\x41\xc4\xec\xe0\x35\xac\xa0\xd5\x3e\xcd\x09\xa7\x97\x9d\x8f\xae\x6b\x77\x27\x13\x12\xb5\xc2\x12\x77\x6d\xa0\x8d\x08\x95\x36\x3c\x3a\x38\x1c\x22\x54\xc1\xca\xc8\xad\xcd\xf9\xc3\x23\xf3\x43\x73\xd7\x81\xd6\x5d\x14\x50\xb1\x09\xbf\x2c\xd8\x7b\x54\x86\xe2\x5a\x22\x09\x79\x2f\x27\x87\x95\x58\x02\x03\x9f\x74\x6b\xb9\xe8\x1d\x8b\xc3\x4b\x3e\x99\xe8\x4e\x34\x9e\x65\x16\xcd\xe0\xa4\xb4\xe6\x80\xa6\xd3\xa8\x2c\x9b\x3d\xd6\x27\x85\xe5\x48\xee\x5e\xf6\xcd\xe0\x68\xa9\x29\xca\xac\x02\xc4\xdf\x03\x87\x03\xcc\x9c\xcf\xe1\x7d\x3b\x48\xe3\x01\xa2\x12\x32\x69\xcb\x30\x44\x85\x22\xa1\x0c\xe1\x71\x45\x75\x98\x75\xa0\x14\x87\x40\xa0\x3e\xe4\xf4\x69\x59\x27\xbc\x09\xbb\xc9\x6f\x5d\xa2\x0e\x80\x7c\xa4\x3a\x35\x0e\x70\xc7\x06\xdf\xb6\xe3\xe3\x2f\x33\x38\x5e\x6b\x58\xb7\x72\xd8\xb8\x19\x10\x89\x5b\x84\xe8\x0b\x14\xc5\x45\xd9\x68\x5b\x87\x41\x4d\xb2\xdc\x2c\x4d\x51\x80\xdb\x18\x62\x69\x8b\xe7\x55\x9f\x8e\xd7\x9e\x65\x16\x3d\x62\xd3\x1b\x38\x68\xd3\xb6\xc7\x0a\xd3\xd9\x75\x3e\x83\x13\x6b\xd0\x50\xd8\xc6\xce\x86\xea\x74\xa8\xbf\x9e\xb4\x9b\x7f\xff\x5e\xd0\xea\x60\x95\x16\x2e\x4c\x99\xbb\xff\x39\x3f\x9f\xc1\x11\x65\x26\x4b\x27\xc2\x6f\x32\xe4\x02\x5e\x3c\x1c\x98\x8a\x8e\x53\x38\x15\x44\xed\x19\x96\xa6\x4e\x0b\xf9\x92\x27\x69\x8c\x5f\xdf\x2d\x3f\x63\x60\xd8\x95\xbd\x8a\xfa\x8b\xe1\x5b\xe0\x59\xe7\xea\x5a\x45\xa0\x22\xfc\x9a\x1b\x5a\x8e\x56\x4f\xc3\x4c\x30\x06\x23\xb5\xdd\x46\x6b\xc0\xea\x87\x1d\x17\x06\xd8\x39\xc4\xaa\x07\x60\xf5\xa8\xae\x75\x8f\x9f\x66\xd0\xfd\x5c\x7c\xee\x8d\xe2\x7b\xbf\x55\xb4\x53\xfa\x29\xd8\x7c\x83\xeb\xc5\x5f\x75\xc5\x68\xbb\x3a\x3e\xb8\x29\xaf\x1e\xfe\x2b\x8c\x48\x16\xab\x7a\x6d\x05\xcd\x34\x30\x95\xa5\x5e\x43\xd8\x7e\xbe\x7d\xf7\xd6\x5d\x96\x34\xc3\xb3\x3d\xa0\xe5\xfb\xf8\xd4\xf8\x2a\xa6\x44\x8e\x70\xc2\x6a\xb5\x6e\xab\x6a\x62\x79\x2d\xd8\x34\x43\xc3\xff\x6b\xeb\x5c\x6b\x97\x9b\xe7\xed\xac\x73\xb5\x50\x8d\x81\x57\x14\xde\x0c\x4e\x46\x1b\x65\xdd\xe4\x9a\x2e\xd9\x4e\xaa\xd1\xad\x97\xcf\x50\x7a\xba\x1d\x89\xcb\x61\x1c\x5c\xe5\x0d\xb4\xf4\x4e\x37\xef\x8c\xc3\x5a\x2d\x73\x2a\x3a\xbd\x71\xdd\x26\xc5\xdb\x5e\x86\x37\xd7\xcb\x76\x03\xf6\x17\xf2\x36\x5b\xb6\x9b\xd2\xd4\x1c\x7f\x72\x52\x3f\xd4\xe6\xaa\x34\xfd\xa7\xb9\x8d\x36\xb7\xbf\x6f\x6f\x6b\x9e\xf7\x19\xfb\xee\x35\xf4\x7d\xf2\xc8\xf7\x47\x1a\xf8\x96\x48\x6f\xc1\x37\x3c\xe4\x35\x90\x1c\x32\xe1\xfd\x2e\xe7\xbb\xdb\xb4\x6c\x60\xf9\x2d\x0a\x6a\x36\x16\xbd\x7f\xf6\xba\x7f\xa5\x7e\xa8\xe6\x6e\xe6\xcb\xc4\x60\xaf\x7c\x55\xf5\xb3\x1d\xa3\x3e\xf3\xbb\x91\xb5\x46\xef\x9a\xf9\x55\xcd\x85\x46\x70\xaf\xc0\x8d\x91\x95\x7d\xd7\x83\x7f\x1f\xae\x42\x1b\xec\x5a\x4e\x5d\xfb\x61\x5a\xbc\x12\x48\x92\xae\x2f\x45\x31\x9f\x43\x69\x3e\xd6\xd7\x53\x69\xaf\xf1\x79\x0e\xab\x2c\x21\x6c\x7b\xf2\x33\xc0\x39\xda\x54\xbe\x66\xee\x5b\x9c\x7e\x24\x99\x4f\x7b\x41\xfa\x26\xdc\xdd\xab\x1d\x73\x23\x2e\x12\xa2\x24\x48\x25\xa2\x44\xf9\x37\x78\x4f\xa5\x12\x9b\x36\xf3\x69\x1d\xc3\x03\xf4\xbf\x5f\x66\x75\xb2\xec\x09\xb4\x57\x09\x1e\x06\x8d\x49\xa0\xf9\x1c\xde\x58\x76\x72\x4d\x19\x11\x9b\xd6\x3f\xf7\x54\xeb\x48\x90\x29\x93\x7c\xa3\xb1\x19\xe3\x83\x1d\xb5\xae\x19\xdd\xda\xb9\x53\x6b\x88\x44\xed\x20\xa0\x77\x0a\xc0\xe5\xd8\x40\xc1\xf2\x98\xd6\x2d\x53\x3e\x92\x7b\xff\x37\x41\x15\x1a\xd6\x39\xa0\xcc\xcc\xc6\xda\x03\xca\x6f\xed\x67\x4f\xf1\x20\xf3\x2d\x87\x01\xa3\xdc\xb6\x61\x8c\xc6\xa1\x1b\x24\xa1\x65\xd1\xf6\xce\x3e\x31\x67\x69\x26\x87\xa7\x83\x48\xea\x6d\x7b\x09\xe8\xb4\x48\x9a\xf3\x67\x00\x00\x00\xff\xff\xb1\x0d\xa4\x52\x03\x22\x00\x00")

func templatesSchemaGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemaGotmpl,
		"templates/schema.gotmpl",
	)
}

func templatesSchemaGotmpl() (*asset, error) {
	bytes, err := templatesSchemaGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schema.gotmpl", size: 8707, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemabodyGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x38\x30\xf2\x10\x07\x89\xfc\xde\xb7\x14\xdd\x25\x03\xd6\x0e\x69\xb7\x97\x62\x40\x19\x8b\x8e\x39\x48\xa2\x26\x52\xed\x3c\x41\xff\x7d\x90\x14\x49\xbc\x93\xb2\xbd\xc4\x4e\xfd\x66\x5b\xd4\xe1\xb9\x7e\xdf\xf1\x21\xab\x0a\x62\xbc\x26\x19\x86\x39\x5b\x6d\x70\x8a\xde\xd2\x78\x3b\x87\xba\x66\xbc\x28\x57\x1c\xaa\x19\x40\x55\x41\x81\xb2\x47\x0c\xd1\x6d\x92\x7c\x58\x43\x5d\xcf\x00\xda\x9f\xc9\x1a\x68\x01\x97\x28\x8b\xe1\x22\xba\x63\x1f\xcb\x87\x4f\xdb\x1c\x43\x74\xc7\xde\x22\x86\xfb\xcf\x3f\xfc\x93\xd3\x82\xe3\x78\xd1\x7c\xb9\xcd\x68\xb6\x4d\x69\xc9\x7a\x31\xa2\xfc\xdf\x0a\x9a\xe3\x82\x13\x2c\x3c\xed\x37\xca\x30\x5c\x44\xef\x08\x5b\x15\x24\x25\x19\xe2\xb4\xf8\x91\xe0\x24\x86\xe8\x3d\x4a\xb1\xb8\x5c\xd4\x2c\xa3\xbc\xd5\x6c\x54\xc1\xa5\xec\x42\x16\xd3\x0b\x6a\x56\x7f\x2a\xf3\x04\xab\x8f\xdb\x05\x1c\xa7\x79\x82\x38\x86\x79\x5e\x90\xaf\xbc\x59\xb7\x6e\x14\x9b\x43\x64\x10\x87\x13\x66\x14\x23\x4b\xe9\x9c\xef\x12\x93\xc5\x9a\xc9\x26\xd1\xd3\x0c\xd8\x5f\xf9\xdd\x14\xcf\x62\x39\xda\xd2\x22\xfd\xfb\x4d\x63\x53\xf4\x33\x62\xb7\x71\x4c\x38\xa1\x19\x4a\x6c\x89\xd3\x2d\x35\xae\xbb\x91\xd4\x58\x2e\x65\x57\xc4\x74\xc5\x78\x41\xb2\xc7\xb9\xe5\x75\xc5\x88\x1b\x29\x0f\xda\x55\xdb\x3f\x50\x42\x62\xd4\xbc\xf9\x8e\xae\x3e\xba\xa4\x19\xb2\xb7\x49\x53\x21\x71\xbb\x54\x1e\xd3\x76\xd1\xe8\x5f\x55\x90\x23\xb6\x42\x09\xf9\x17\x9b\x05\xf7\xc5\xd1\x28\xd8\x46\xaf\x7b\xcb\xbf\xb6\xf5\x38\xa4\x28\xff\xdc\xb9\xe1\x4f\xc9\x3b\x1d\x54\x34\x7a\xd8\xdd\x03\x5f\xfe\x62\x34\x7b\x33\xbf\x99\x7f\x11\x02\x22\xc6\x5a\x09\x7d\x67\xb7\x20\xee\x8e\xe3\x54\x8e\x53\x58\x94\xba\xf7\x94\x3c\x98\x1e\x9e\x56\x8c\x06\x43\xc6\xb8\x5c\x88\x81\xb1\xc7\xa5\x95\x38\xba\xb9\xaf\x27\x39\x20\xda\xa2\x2e\x14\x9f\x83\x22\xd0\x9b\xae\x3b\xdf\x54\x56\x4a\x39\x3f\xe1\x2c\xe5\x23\x48\x9a\x61\xbc\x53\xf9\x27\xda\x3e\x11\x94\x34\x6e\x25\x7e\xab\x2a\x0d\xe8\x35\x32\x31\x40\xf6\x85\x84\xd1\x97\x66\xc4\xd6\xa1\xce\x0b\xce\x62\x08\x3c\x00\x3c\x58\x21\x85\xcd\xb5\x61\xd8\x66\xee\x8d\x86\xea\x18\x0b\xe7\xa9\x4a\x3c\xe8\x17\x84\x7c\xbb\x62\xde\xc1\xd0\x2e\x10\xe9\xa6\x01\x9d\x10\x9e\xc0\x77\xda\x3e\x62\xac\xb4\xc3\x81\x9e\x12\x4b\x10\x03\x68\x83\xb9\x1d\x20\x6e\x5f\x78\xdb\x3b\x0c\x76\x5c\xf3\x2f\x57\x9c\xbf\x0f\xcc\x8d\x5e\xae\xfb\x7a\x11\xdb\xdb\xce\x8e\xd0\xfe\x56\xee\x6e\x43\x3b\x5a\x7b\x2b\x3b\x82\xab\x08\x6e\x7e\x18\x39\x65\xdc\x12\x7f\x73\x83\x96\x56\x14\xa6\xa7\xaa\xdb\x76\x81\x04\xef\xca\x83\x62\xc0\x00\xdc\x01\x00\xd0\x9b\xa9\xd6\xe1\xf1\xb5\x13\x8a\x31\x63\x1b\xa1\x34\x10\x93\xfb\x07\x55\xb0\xaf\x6d\xf8\x3e\x6b\x2a\xb8\x13\x08\x29\xaa\xf0\x6c\x3b\x66\xae\xb5\x27\xce\xa4\x52\x3b\x71\xca\xeb\x3f\x0a\xa4\xf7\x8d\xf0\x4d\x5f\x83\x2f\xcf\x7c\xa6\x22\x7d\x9d\x35\x3a\x91\xf7\x4e\x98\xd9\xce\x84\x76\x28\x42\x1b\x72\x61\xd8\xc3\x4b\x72\x46\xd4\x69\x5c\x53\xd7\x60\x77\x87\x60\x7f\xa3\xf6\xe8\xca\xbe\x4c\xef\xf1\xdf\x25\x29\xda\x4d\xae\x69\x4a\x1a\x31\x7c\x3b\xe8\xdf\xc3\xad\x48\x47\x06\xd0\xf5\x25\xfd\xeb\x60\x9e\x33\xe1\xd4\xf5\x4c\x65\x1c\x5a\xf2\xa9\xa4\x33\xb8\x6e\x8f\x13\x02\x9b\x77\x2d\xe3\x7d\x8d\x7f\xd4\x59\x75\xd0\x60\xdc\x3a\x78\x0f\x1b\x8a\xeb\x23\x71\xa3\x40\xbd\xc2\x9b\xc8\x34\x81\x89\xee\xd1\xb7\x5f\x31\x63\xe8\x11\xef\x57\xd4\xca\x00\xde\x31\x7f\x0f\x1f\xbf\xbb\xfa\x4f\x53\x24\x4e\x8d\x05\x9d\x83\x6d\xcd\x65\xce\x09\x75\xb8\x07\x8e\x67\x8a\xac\xa5\x6a\x38\x5f\x8a\x96\x8f\xc4\xb9\xbc\xe2\x05\x2d\x1f\x12\x7c\xb5\x0c\x98\x25\x87\xcf\x95\x15\x20\x30\x29\xac\x90\xeb\xcc\x54\xc8\xae\xa3\x39\xf3\x3c\xfd\x59\x69\xd9\x74\xac\x22\x75\x69\xe1\x14\x3d\xd3\xf5\xf7\x14\x96\x96\xbe\xcf\xc0\xb7\xe1\x14\xf4\xa1\x78\x4f\xb3\x5e\xb9\x33\x1f\x4d\xe5\xa3\x33\x1d\x9c\xe9\xe0\x30\x87\x8a\x21\x94\xe0\x25\x05\xdf\x25\x81\x03\x53\xc3\x99\x19\x4e\x8d\x19\xea\xff\x15\xd7\xad\x29\x63\x0e\x2d\xd4\xf5\x9b\x36\xa3\xef\xf1\x0a\x93\xaf\xb8\xe8\xe2\x1d\x19\x57\x5e\xef\x94\xe2\xd2\x67\xab\x05\x23\x2b\xe9\x4c\x64\xcc\xf1\x40\x5b\xc0\x6d\x8c\x4d\xd5\xfa\x7a\x66\xe7\x6f\x91\xbc\x6f\xb3\xd8\xc8\xde\xee\x20\x3b\x02\x69\x99\xb4\x38\x8c\x7e\xb6\xe2\xdc\x3f\xbe\xfd\x1d\x0a\x75\x58\x6b\x44\xb8\x17\xb0\x54\xb6\xa6\xc5\xa0\xda\xd3\x87\xd9\x43\xe9\x8a\xa4\x39\x7b\x67\x72\x29\x63\x08\xbb\x53\x68\xc9\xf9\x6e\xf3\xa7\xf1\x4d\xeb\x8b\x15\x4a\xb1\xb4\xe3\x80\x76\xb6\x59\x1d\xd4\xf5\xe5\x62\xf0\xca\xb5\xa0\xa0\xd6\xc8\x99\xb5\xd0\xa8\xe4\x72\x21\x49\x11\x50\xe4\x48\x92\xcc\x8a\x21\x72\x30\x77\x77\xa8\xe2\x4e\xa3\xa1\x6e\x00\xa2\x25\x1f\x39\x67\xb7\xa3\x93\x5d\xae\xc4\x7a\x8f\x51\x3c\xb7\x60\xf7\xb9\xfa\xfa\x5a\x4f\x4d\x1d\x69\xfe\xd2\x67\xd7\xe7\x40\x59\x8e\xb7\x87\x1b\x3c\x62\x5d\xfe\x52\x32\xd7\x60\x79\x79\x05\xcd\x0a\xe0\x1b\x0c\x0f\x88\x61\xe0\x8d\xef\xda\x0d\x59\x04\xbf\x33\x1c\xc3\x9a\x16\x50\x66\x29\x62\x1b\x94\x24\x24\x7b\x84\x9c\x26\xdb\x94\x16\xf9\x86\xac\xda\xe5\x2c\x6a\xff\x65\xf8\x7a\x47\x23\xce\x05\xb4\x8e\x96\xbf\x12\x47\xfe\xe7\x7f\x5a\x13\x3a\x86\xee\xbf\x00\x00\x00\xff\xff\x97\x0b\x66\x07\x5d\x30\x00\x00")

func templatesSchemabodyGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemabodyGotmpl,
		"templates/schemabody.gotmpl",
	)
}

func templatesSchemabodyGotmpl() (*asset, error) {
	bytes, err := templatesSchemabodyGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemabody.gotmpl", size: 12381, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchematypeGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4f\xc3\x30\x10\x85\xf7\xfe\x8a\xa7\x4c\x09\x12\x16\x7f\xa1\x2c\xa8\x03\x30\xc0\x1f\x30\xdc\x19\x22\x5d\xce\x51\xed\x0e\xd1\xc9\xff\x1d\x99\xa6\xc5\x43\x17\x58\xe8\x76\x7a\xc9\x7d\xef\xbd\xb3\x19\x88\xc3\xa8\x8c\x2e\xbd\x7f\xf2\xe4\x5f\x97\x99\x3b\x94\xb2\x01\xcc\x6e\x31\x06\x78\x25\xf4\x71\x8f\xbe\x17\x56\xb8\xad\xc8\x73\x18\xf0\x91\x71\x37\xc0\xed\xd2\x56\xa3\x2e\x53\x3c\xa4\x01\x3d\x34\xe6\xaa\x3d\xfa\x79\x38\x32\x8e\x94\xcc\xd3\x2c\x3e\x9f\x4d\xee\x23\x2d\x1d\xdc\x8f\x0d\x4b\xe2\x76\xe1\x64\xdb\xf2\xdc\x2e\x3d\x1d\x44\xfc\x9b\xd4\x5f\x6f\xcc\xc0\x4a\xed\x92\x7b\x88\x35\x7d\x43\x55\x2a\x65\xb3\x4e\x55\xfe\x9e\x4f\x7d\x89\xf7\x1c\x02\xd3\xcb\x15\xf5\xfe\x65\x85\xbc\xcc\xdc\xc4\xff\xef\xf4\x7f\x7a\xb5\x31\xd4\x74\xa3\x4f\x4c\x6b\x75\xb3\x0b\xca\xea\x55\xbf\x9d\x6f\xd4\xc2\x2e\x1e\xeb\x2b\x00\x00\xff\xff\xbd\xa8\xfd\xff\xde\x02\x00\x00")

func templatesSchematypeGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchematypeGotmpl,
		"templates/schematype.gotmpl",
	)
}

func templatesSchematypeGotmpl() (*asset, error) {
	bytes, err := templatesSchematypeGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schematype.gotmpl", size: 734, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemavalidatorGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x93\xdb\xb6\x11\x7f\xae\x3e\xc5\x56\xe3\x76\x24\x47\xa5\xf2\xd0\xe9\x83\xdd\xeb\x8c\x9b\x38\xcd\x4d\xe3\x3f\xe3\x73\xfc\x50\x8f\xa7\xc6\x49\xa0\x84\x98\x04\x69\x80\x3c\xdf\x95\xc3\xef\xde\x01\x40\x80\x20\x08\x52\x94\xc4\xb3\xef\x2e\xca\x4b\x8e\x04\xb8\xc0\x2e\x76\x17\xbf\xfd\x01\x56\x51\xac\x71\x48\x28\x86\x69\xca\x48\x4c\x32\x72\x85\x43\x82\xa3\xf5\x15\x8a\xc8\x1a\x65\x09\x9b\x96\xe5\x04\xa0\x28\x48\x08\xc1\x1b\xfc\x39\x27\x0c\xaf\xe5\x2b\x12\x02\x66\x0c\x9e\x9c\x41\xd5\x17\x9b\xf6\xa2\x10\xad\x88\xae\x61\x86\x3f\x43\xf0\xaf\xe4\xed\x4d\x8a\x61\xca\x33\x46\xe8\x66\x3a\x87\x19\x4d\x32\x08\xce\xf9\xcb\x3c\x8a\xd0\x65\x84\xe7\x50\x96\x17\xb2\xb1\x28\x00\xd3\x35\x94\xe5\x4c\xc9\x08\x5e\xa3\x6c\x0b\x65\x59\x14\xd6\x9f\x38\xe2\xb8\x2c\xa7\xd3\xa2\xc0\x74\x5d\x96\x0b\x28\x0a\x48\x19\xa1\x59\x08\xd3\x3f\x7d\x9e\x42\xf0\x4b\xb2\x42\x19\x49\x28\x54\x8d\x24\x04\x31\xe2\x2c\x61\x62\xd4\x67\x34\xa1\x37\x71\x92\x73\x77\x0a\x62\x90\x6a\xae\x72\x02\x52\x7a\x51\x04\xef\x50\x94\xe3\xe7\xd7\x29\xc3\x9c\x93\x84\xca\x8e\x03\x45\xce\x2b\x29\xf3\xa7\xd2\x58\x7f\x3c\x03\x4a\x22\x28\x26\x00\x00\x0c\x67\x39\xa3\xe2\xfd\x04\x40\x19\xb9\x52\xde\x18\xfc\x05\xa1\xbf\x60\xba\xc9\xb6\x5d\x16\x37\x1d\xc6\xb3\x97\x5a\x25\x2d\xaf\x56\x07\xca\xf2\xb1\x99\xa1\xcf\x2a\x73\x21\xd8\x9e\xf2\x40\xa5\xe5\xa4\x6a\x95\xd1\xf5\x0e\x95\x75\x87\xbb\xa3\x72\x3d\xe5\x83\x54\x7e\x8d\xb2\x0c\x33\xda\xa5\x70\xd5\x7c\x37\xd4\xfd\x58\x14\xf5\x7c\x3f\x1e\xb6\xc2\x84\x92\x38\x8f\x7b\x5c\x5a\x34\xab\xd9\x89\xf4\x71\xf1\x05\x6d\x36\x98\xa9\x1c\x42\x68\x86\x37\x98\x4d\xa1\x2c\xcf\x69\x76\x6b\xe9\xa2\x6f\x5c\xa2\xc6\x8d\xb8\x30\x58\x18\x25\xa8\x9e\xc6\xdf\xfe\x7a\x4c\xdc\x28\xab\xc8\xa7\xe7\xd7\xab\x28\xe7\xe4\x0a\x9b\xd7\x87\x06\x53\xaf\xa9\x55\xf3\xef\xce\xd4\xda\x2a\x8e\xa9\xf5\xeb\xc3\x4c\x9d\x47\x19\x49\x23\xfc\x2a\xec\xb4\xb6\xe9\x31\x9e\x09\xa5\x4d\x8e\x31\x85\x35\xeb\x83\xd4\x7e\x4e\x2b\xf7\x5a\x2e\x85\xa6\x39\x06\x4c\xf3\xb8\x61\x80\xa2\x08\xde\xe0\x15\x26\x57\x98\xbd\x44\x31\x2e\xcb\x40\x9b\x44\xa8\x86\xf8\x0a\x45\xe4\x7f\x18\x02\xd1\xa8\xac\x61\xbd\xbc\xc8\xc3\x90\x5c\x43\x59\x8a\x81\xc6\x76\xbd\xbd\xec\x75\x88\x75\xce\xf9\x0f\x39\xcf\x92\xf8\xa7\x84\xc5\x32\x69\x76\xf9\x86\xea\x30\xa6\x67\xb8\x8d\x55\x88\xa9\x81\xaa\x1e\x6d\x2d\x03\x05\xc3\x66\xf3\x05\x84\xb2\x27\xdf\x4b\xef\xfa\xff\x1a\x55\xf2\x88\xac\x70\x0b\x4c\x82\x8d\x26\x15\xe0\xe9\x05\x94\xa3\x9a\xc5\xd5\x1a\xfc\x8b\xeb\xa8\xd9\x01\xd1\x04\xfe\x7b\x41\xe8\x79\x86\x63\x2e\xf3\xad\xfa\xab\x52\x49\x8c\x76\x4e\xd7\xf8\xfa\x1d\x62\x2d\xd7\xae\xfc\xfd\x42\x3c\x3c\x39\x03\x42\x45\x20\x47\x58\x6c\xf4\x1e\xf7\x9b\xfb\x77\x52\x39\x5c\xb7\x01\x75\x8f\x71\x0d\x38\x44\x25\xbd\xa9\x55\x13\xdc\xc3\xc2\xad\x2d\x6c\x97\x8e\x55\x8f\x6f\xa5\xa3\x99\xe0\xc1\x3a\xfe\x4a\xc9\xe7\x1c\xef\x50\xd3\xea\x34\xa6\xa6\xc3\x32\xdd\x20\x35\xcc\x5e\x20\x77\x83\x30\x61\x20\xa3\xdf\x51\x68\xcf\xed\x60\xec\xbc\x3f\x92\xbe\x6a\xfb\x70\x62\xbd\xca\x07\xf2\x75\x9d\xde\xaa\xe7\x9f\x11\x7f\xa7\x14\x25\x09\xe5\xfa\xed\x39\xff\x27\xe2\x58\x02\x1f\xf3\xe6\x59\x44\x10\xaf\xf3\x22\x48\x53\x16\x85\x71\xc9\xb2\x14\x76\xfc\xfe\xa9\xf3\xee\xef\xd0\x99\x3c\x9c\xae\xdf\x7d\x67\xd4\x2c\x8a\x2f\x24\xdb\x56\x63\x9b\x01\xb5\x36\xa2\x84\xb7\x37\x49\x55\xb8\x6b\xcd\xe6\x60\x7d\x20\x97\x98\x7f\x41\x9b\xe0\x9c\xff\x07\xb3\x64\xd6\x91\x69\xa1\x10\xce\x21\xe4\xb0\x4a\x8c\x25\x02\x60\x95\xd0\x8c\xd0\x1c\x5b\x2f\xed\x49\xe9\x05\xd0\xcf\x19\x8e\xd3\x08\x65\x92\xbe\x48\x52\xcc\xb2\x9b\x7a\xaf\x81\xc0\x74\x6d\x7e\xa8\xd7\xcb\x5a\xcd\x0a\x62\x5a\x0b\xd9\xc4\x06\xda\x87\xfd\x4a\x35\x7d\xc7\xde\x23\x1c\xc7\x6f\xef\xb7\x95\x4b\xe0\x59\xcf\x76\x2b\x85\x5c\xe1\x05\x24\x9f\x84\x1c\xcc\x58\x30\x7b\x8c\x19\x4b\x18\x0f\x6a\x97\x9a\x3f\x15\xed\x85\x31\x4e\xe5\xc0\x57\xd8\x8c\x21\x22\x6a\x8f\x50\x9a\x4f\x9a\xf6\xf7\x44\x84\xdf\x58\x50\x3a\xfb\xa4\x0b\x0e\x40\xa3\x83\x18\xa5\xd6\x7a\xa9\x36\x21\xee\x67\xc4\x9f\xad\xd7\x44\xa8\x85\xa2\xd7\x6a\x65\x09\xe6\xa0\xa9\x97\xc0\xd7\xda\x00\x14\x5f\x0b\x4c\x54\x3c\x50\x83\x03\x3a\x88\x49\x72\x24\x74\x13\x47\xd6\x32\x48\x7b\x69\xd7\x3d\x22\xfc\x2a\x91\x94\x44\x95\xc8\x0a\x05\x8b\xb9\x75\xd8\xfa\x25\xc6\x6b\x2b\x9f\x89\x09\x54\x59\xca\xdb\xfd\xdf\xf8\xc6\x24\x2e\x86\xe8\x06\x77\x45\x52\xa1\xe2\x51\x25\xa5\x0e\x1f\x30\x09\xb8\x91\x8d\x40\x63\xeb\xc3\x93\x90\x95\x7c\xfc\xf9\x9e\xbf\xd6\x24\x69\xed\x8a\x76\xbe\xee\x5c\xce\x89\x2f\x4e\x44\x54\xa3\x48\x87\xb5\x7f\xaa\x55\x50\xd7\xf1\xd4\x70\xec\x01\xe9\xc3\x75\x97\xd6\x2c\xca\x5a\xb6\xe5\x4d\x45\x51\xad\x53\xf0\x2c\x8a\x5e\x85\xcd\x57\xcd\xd5\x28\x0a\xe8\x4f\xc3\x5a\x74\x3d\x88\xf9\x6b\x04\x81\x26\xba\xea\xfd\xea\x6d\x9e\x46\xd8\x76\x1f\xb3\x51\x2f\x97\xf0\xf6\xd5\x8f\xaf\x9e\xe8\xac\x40\xe8\x06\x90\xe9\x06\x44\xf6\xe3\xdb\x24\x8f\xd6\xb0\x49\x60\x8b\x19\x5e\x08\x93\xdd\x24\x39\x70\x8c\x21\xdb\x12\x0e\x0c\x11\x8e\x01\x51\x20\x9c\xe7\x58\xc8\x44\x19\x6c\xb3\x2c\xe5\x4f\x96\xcb\x0d\xc9\xb6\xf9\x65\xb0\x4a\xe2\x25\x27\x6b\xfc\x05\x45\x9f\x22\x74\xc9\x97\x9b\xe4\x2f\x5c\x95\x60\x4b\xf9\x19\x9f\x98\x89\x6b\xa3\x3b\x7a\xfb\xe9\x78\xb1\xab\xd9\x26\x94\xdf\x7a\x6b\x4d\x57\xe2\x95\x89\x56\xd5\x51\xb9\x8c\xda\x26\x1b\x72\x9e\x31\x86\x6e\xdc\xaf\x9d\x42\xae\xfd\xd5\x0b\x94\x3a\x9f\x34\xb3\x7b\xd0\x9c\xaf\x22\xce\x7f\x48\xe2\x34\xc2\xd7\xaf\x2e\x7f\xc3\xab\xcc\x5a\xba\x73\x7f\xfe\x3f\x05\xdb\x29\xd8\x8e\x0c\x36\x95\xd2\x1b\xa5\x7c\x6b\xcf\x93\x95\x4c\xa5\x41\xc8\x92\x18\x62\x94\x4e\x6c\x20\x07\x8d\x12\x06\xbe\x76\x0d\x33\x8c\xc2\x68\x01\x05\xad\x61\x63\x29\x2d\xae\x26\x91\x51\xe8\x25\x6b\x7c\x51\xa6\xe0\x9f\x76\x04\xab\xdc\x31\x0e\x6f\x10\xf7\x57\x42\x63\x43\x6b\xbb\x16\x96\xb5\xd0\xac\x05\xdd\x3b\x0b\x81\x53\x29\x70\x70\x29\xe0\x56\x5a\x6e\xde\x33\xd5\xa7\x37\x59\x59\xd5\xe9\xee\xa4\x65\xba\x36\x97\xb4\xf9\xd4\x33\xcc\xe0\x41\x7c\xc5\x8e\x1d\x1a\x7d\x39\x12\x14\x59\x32\x7a\x9e\xac\xe4\x1e\x94\x2b\xfb\xf8\xdc\xb6\x1d\xba\x01\x72\xd3\x2b\x5a\xac\x46\xc3\xbe\x6e\xee\x69\x5a\xd7\xf2\x99\xd6\xba\x74\xc3\x24\xdf\xe2\xf4\xa1\xa5\x49\x4b\x7a\x1f\x64\x72\xc4\x69\xd0\xd4\x16\xe2\x43\x4e\xce\xc7\x12\x3b\xb5\xbf\xf4\x00\x28\xfb\xc3\xe3\x21\x54\x7b\xc8\xae\x75\xe8\x61\xf8\x57\x5b\x1c\xa3\x46\x19\xef\xec\xa2\xea\x71\xd6\x3a\xe8\x33\xf7\x41\x54\x9f\x47\x9b\x24\x13\xef\x9f\x9c\x59\xc5\xf3\x64\x95\x50\x9e\xc1\xac\x0e\x55\x2d\x55\xfa\xb7\xf5\x99\xcb\xd3\x8a\xec\xb3\x42\x69\x96\x33\xcc\xe5\xa1\x54\x75\x3e\xe5\xee\x21\x42\xd6\x1f\x76\xc8\x69\x34\xc3\x99\x4f\x86\xc9\x94\xb5\xc3\x69\x12\x54\x1a\x68\x72\x85\x44\x79\x0c\x2b\x14\xe3\x16\x38\x80\xf7\x1f\x08\xcd\x30\x0b\xd1\x0a\x17\xe5\x24\xcc\xe9\x0a\x08\x25\xd9\x6c\x2e\xb3\xb8\xf8\x54\x68\xf1\xfe\x43\x63\xad\xd6\x98\xe1\x30\xc4\xeb\x0b\x39\x80\x30\x98\x59\xae\x7a\xab\xf9\x8d\x27\x34\xf8\x95\xc6\x88\xf1\x2d\x8a\x66\xef\x3f\x5c\xde\x64\x78\xf6\xb1\x28\x64\x8b\x31\xe7\xc7\xf9\x02\xfe\xcc\xb0\x77\xd3\x49\x11\x25\xab\x19\x66\x6c\x5e\x15\xc6\x42\xab\xff\x2e\xe0\xaa\xae\xe6\xc5\xec\xcc\x96\xe7\x57\xf1\x0c\x50\x9a\x62\x2a\x37\x7c\x6f\x8f\x05\x5c\xa9\x01\xca\x89\xb2\xc0\xcc\x03\xb4\x9a\x78\xc4\xce\x36\x8f\x5d\x10\x77\xce\x9f\x5f\xa7\x09\xcb\x74\xb1\xe0\xe0\x32\xa7\xf2\xb2\x8e\x1f\x95\x94\x39\xec\xc6\x74\x29\xca\xb6\x0b\x88\x34\x0a\x51\x0e\xbd\xa8\x1d\x6d\xf7\x5a\xcd\x41\xee\xde\xd2\x78\x1e\x94\xe4\x19\xa5\x12\xbf\xe8\xb4\xf4\xa0\x13\xbb\x3e\xca\x47\x91\xc1\x95\x63\x74\xb9\x6d\xdd\x67\x3c\xdf\xb5\x76\xc5\xe1\x0e\x6c\x4f\xf6\x56\xbd\xb8\x1e\xa8\xd7\x95\x4d\x37\xcb\x9f\xbb\xdd\xf9\xb1\x32\xf9\xa3\x1e\x6f\x7d\xe4\x73\xd7\xea\xed\x1e\x0e\x6b\xe6\x75\xac\xd7\xea\x55\x1a\xd3\x75\xad\xe9\x1d\xe7\xbe\xfd\xc4\xa1\xa7\xbc\x4b\x98\x8d\xb5\x04\xbc\xe1\x9d\xa9\x5a\x61\xf6\xb6\xcf\xdf\xb5\x84\xdd\x32\xd7\xbe\xae\x5e\x2b\xda\xeb\xea\xa6\xdb\xb0\xd4\xfd\xf8\xab\x24\x66\x33\xa9\xbb\x97\x9d\xcd\xd4\x8e\xf0\xf1\x26\xbe\xd0\xf5\x9c\x99\x13\x57\xd5\x40\x51\xc0\x36\x8f\x11\xb5\x47\x37\x2b\xe3\x9c\xbf\xda\x27\x97\x35\x78\x6c\xc1\xca\x8e\x98\x6a\x6d\xbb\x3f\x12\xbe\x12\xdb\x32\x95\xb3\x91\xaf\xdd\x58\x6f\xac\xef\x08\x1e\x61\xb9\x86\x5b\x44\x8b\x55\x0f\xe3\x2c\x78\x83\x37\x84\x67\xec\xc6\x5e\xd1\x3a\x4a\xe5\xbb\x8a\x14\xf2\x55\xa4\xb5\x85\x6a\x9a\xc3\x39\xcf\xb5\xca\x93\x8e\x4a\x68\xff\xda\x65\x58\xc5\xb2\x67\xd5\xd2\x12\xdb\xa8\x5c\x06\x56\x2f\x2d\x21\x75\x05\x33\xac\x8a\x69\x17\xe3\xe2\xb9\x55\x8d\x37\x64\xea\x3b\xe5\x54\xec\x89\x96\x9b\x25\xec\x27\x61\x40\xe5\x17\x73\x75\x27\xbb\x6b\x9d\xda\x67\xd6\x87\x5d\x4b\xe8\x27\x69\x34\x4b\xc2\xeb\xfc\xc9\x30\x5f\x40\x85\x3e\xf4\x7f\x5d\x27\xdb\x2e\x4b\x51\xb7\xed\x26\x15\x3c\x9c\xdb\xde\x7c\xa5\xba\x64\xb2\x43\xc3\x5e\xed\x7c\x33\x77\xee\xcc\x9f\xeb\x0d\xd4\x7b\x89\x5e\xdf\x8a\x98\xcf\x61\xa0\x46\x0d\x4d\x66\x6b\x96\xa4\xaf\xd1\xea\x13\x12\xfe\xa4\xaa\x49\x21\x69\x20\xc9\x36\x50\xbb\x26\xb1\xd5\xbc\xba\xef\xa7\x42\x06\x07\xff\x03\xa1\x2a\xb4\x55\x26\x7d\xd1\x3d\x7a\x64\xdf\x5a\x54\x2f\x97\x12\x21\x1e\x16\x03\xfb\x50\x83\x1e\xc6\x78\xfc\x18\xee\x99\xbd\xef\xf8\x5b\x4e\x58\x82\xc2\x99\x5b\x7e\xcf\x2d\x2a\xb3\x71\x0b\xf8\x28\x15\x24\xbc\x9a\x4e\x17\x30\xbd\x4c\xd6\x37\xd3\x85\x4f\xc2\x81\x9a\x59\x7e\x49\x42\x79\x6f\x4a\x40\x69\xf8\x07\x7c\xdf\x42\x63\x09\xe3\x81\x00\x43\x09\x27\x19\xae\xfd\xed\xb9\x68\x11\x5f\x05\x41\x30\xf7\x23\x36\x9f\xbf\x9b\x4b\xa3\x5d\x6e\xec\xb2\x67\x6e\x2d\x62\xea\x3e\x91\xd2\xbc\x66\x13\xe3\x3d\x60\x52\x69\x0f\x03\x78\x8b\x97\xe1\xdf\xdb\x55\xcd\x51\x1c\xa6\x68\x10\x79\x83\x0a\xf9\xa2\x49\x23\xf2\x9d\xe4\xa6\xcb\x02\xb4\xb8\x01\x23\xf6\x58\xfa\xf3\xb8\x91\x0e\x23\x48\x27\x55\x3e\xb5\x73\xc6\x00\xaa\xa4\xaf\xc2\xf0\x92\x25\x87\x10\x2c\x6d\x7e\xe5\x7e\x32\x83\xc3\xdd\xfd\x76\x79\x43\xbf\x57\xfd\xfe\xd8\xc4\xa1\x76\xe8\xcf\x5d\xfd\x1f\xef\x45\xc7\xdc\xf9\x78\xba\xab\xc4\xa5\xa5\x66\x8b\xaf\x18\x89\xcd\x6c\x5e\x75\xad\x90\xa1\xff\xfd\x9d\xc2\x0b\xde\x83\xee\xe1\x41\xd8\xa1\xda\xc3\x81\x13\xf7\x3f\x28\xc7\x88\xc7\xb6\x97\xdc\xb3\x3d\xef\xe0\x53\x07\xe7\xc4\xa1\xea\x6a\xa1\xa0\xfd\x76\xcf\xae\x73\x89\x07\x07\xf9\x77\x68\x7f\xc0\x9e\xe9\x3b\xc2\xb8\xff\xd1\x79\x07\xcf\x40\x06\x2e\xc3\x38\x27\x23\x93\xc9\x64\x3c\x52\xa9\xeb\xd8\xe4\xbe\x38\xc3\x90\xa3\x90\xdb\xf9\xf7\x14\xd6\x3a\xb5\x29\xa5\x9d\xff\x74\xcb\x59\xe8\xc6\xa5\x77\xe7\x2e\x92\x7d\x66\x53\xf6\x52\x2f\xa3\x78\xc4\x89\xa1\xb9\x7b\x90\x4a\x73\x09\xc2\x91\x4e\x4c\xc2\x89\x49\x38\x31\x09\x27\x26\xe1\xc4\x24\x9c\x98\x84\x07\xce\x24\x3c\x80\xa8\x3c\x51\x09\x07\x53\x09\x27\x9a\xe0\x1b\xd2\x04\x83\x88\x9c\xfb\x1f\x9e\x27\x2e\xe1\x44\x00\xdc\x09\x02\x60\xd2\xc7\x00\xb4\x7e\x35\xc4\xc0\x85\xfd\x40\xce\x6d\x96\x11\xf7\x08\xcb\x0c\xac\x22\x4e\xf5\xc2\x37\x86\x27\x23\x16\x09\xbd\x69\xae\x6d\x9b\x21\xa6\x1b\x9e\x78\x12\xd6\xf6\xef\x9a\x81\x73\x5b\x7c\x57\xaf\xd5\xaf\xcf\x34\x7e\xb7\x6d\xd7\x8f\xcd\x04\xdd\x33\x37\x21\xd1\x9f\xa4\xbc\x11\xed\xde\x07\x75\xcc\xdd\xcc\x5c\xff\x0f\x00\x00\xff\xff\xac\xc0\x6f\xc3\x80\x5b\x00\x00")

func templatesSchemavalidatorGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemavalidatorGotmpl,
		"templates/schemavalidator.gotmpl",
	)
}

func templatesSchemavalidatorGotmpl() (*asset, error) {
	bytes, err := templatesSchemavalidatorGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemavalidator.gotmpl", size: 23424, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStructfieldGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4b\x8b\xdb\x30\x10\xbe\xfb\x57\x0c\x22\x87\x18\x6a\xe7\x9e\x5b\x9f\x34\xd0\x36\xd0\x84\xd2\x63\x84\x3c\x4e\x55\xf4\xaa\x24\x97\xf5\x0a\xfd\xf7\x45\x8e\xf3\xf0\xe2\x24\xec\x2e\x4b\xf6\x26\x34\xf3\xf9\x7b\x8c\xc6\x21\x40\x85\x35\x57\x08\xc4\x79\xdb\x30\x5f\x73\x14\x15\x81\x18\x33\x80\x10\x0a\xe0\x35\x28\xed\x61\x52\x2e\xdc\x07\xea\x70\xdd\x1a\x84\xa2\xab\x02\xcc\x66\x10\x02\x78\x94\x46\x50\x8f\x40\x2a\xcd\x9c\xb7\x5c\x6d\x09\x94\xd0\xf7\xa4\x6f\x1c\x3b\x8c\xd5\x06\xad\x6f\x7f\x51\xc1\x2b\xea\xb9\x56\x9f\x34\x5b\xed\x31\x07\x52\x54\x55\x8c\x59\x08\x60\xa8\x63\x54\xf0\x7b\x84\xf2\x07\x95\x18\xe3\x90\xd0\xb1\x3f\x28\x69\xd2\xb4\x63\x84\xcd\x5f\xa7\xd5\x9c\x64\xbd\xf2\x49\xf9\x95\x3e\x96\x5d\x74\x45\x14\x0e\x8f\x26\xcb\xa5\xe5\x5b\xae\xa8\x48\x24\x03\xef\x54\x55\x30\x4d\x01\x94\x3f\xf1\x5f\xc3\x2d\x56\x39\x4c\xb5\xed\xef\x16\xee\xbd\xb5\xb4\xcd\xd3\xe9\xb3\x34\xbe\x5d\x4a\xee\x7d\xea\x89\xf1\x9d\x96\x3c\x29\xf5\x6d\x08\xc9\x10\x74\x8e\x8a\xfe\x78\x90\x58\xfe\xfe\xfe\xad\x67\x85\x3b\x29\xe6\x24\x84\xd3\x3b\x32\x04\x27\xc0\xc7\xc6\x79\x2d\xd7\x74\x0b\xbb\x38\x06\x17\x87\xf6\x4d\x76\x44\x76\xd0\xfd\x98\x7d\x63\x04\xde\x78\xca\x43\x53\xcf\x1c\x72\x41\x9e\x1a\x49\xb2\xc2\xba\x0a\x38\xb4\xbc\xe3\xb4\xe7\x72\x3a\x59\x87\x45\x4d\x19\xbe\x81\x9d\x80\x33\x4b\x31\xcd\x2f\x27\x96\xad\xd0\x8f\xe2\x2e\xa2\xf2\xc1\x98\x46\xde\xcf\x2d\x63\x81\xeb\xaf\xe8\xf5\x53\x19\xbc\x17\x63\xf9\xff\xf1\x5f\x28\xa3\x12\x4f\x09\xbe\xa4\xfa\x15\x6d\x17\x48\x46\x17\xf8\x65\x1c\x0f\x01\x00\x00\xff\xff\xce\x54\xf7\x99\x06\x06\x00\x00")

func templatesStructfieldGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesStructfieldGotmpl,
		"templates/structfield.gotmpl",
	)
}

func templatesStructfieldGotmpl() (*asset, error) {
	bytes, err := templatesStructfieldGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/structfield.gotmpl", size: 1542, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSwagger_json_embedGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x91\x4f\x6b\x1b\x31\x10\xc5\xef\xf3\x29\x1e\x26\x05\x1b\x6a\xed\xbd\x25\x87\x12\xe7\xe0\x42\xe3\xd0\xf8\x56\x0a\x91\x57\xb3\xb2\x1a\xaf\xb4\xd5\x1f\x9b\x65\xd1\x77\x2f\xda\x38\xc5\xbb\x47\xf1\x7e\x7a\xf3\xde\x4c\x55\xe1\xc1\x29\x86\x66\xcb\x5e\x46\x56\x38\xf4\xd0\x6e\x1d\x2e\x52\x6b\xf6\x5f\xb1\xd9\xe1\x69\xb7\xc7\xe3\x66\xbb\x17\x44\x34\x0c\x30\x0d\xc4\x83\xeb\x7a\x6f\xf4\x31\x62\x9d\x73\x55\x61\x18\x50\xbb\xb6\x65\x1b\x67\xda\x30\x80\xad\x42\xce\x44\xd4\xc9\xfa\x4d\x6a\x2e\xb0\xf8\xf6\xbc\x7d\xbe\x3e\x8b\x56\x55\xd8\x1f\x4d\x40\x63\x4e\x8c\x8b\x0c\xd3\x3c\xf1\xc8\xb8\x06\x42\x74\xee\x24\x0a\xff\xa8\x4c\x34\x56\x23\xfe\xff\xd7\x8e\x43\x3b\xef\xce\x8c\x26\xc5\xd1\xea\xc8\x16\xbd\x4b\xf0\xbc\xf6\xc9\x4e\x9c\x3e\x46\x8c\xc9\xa5\x55\x44\xa6\xed\x9c\x8f\x58\x12\xb0\x60\x5b\x3b\x65\xac\xae\xfe\x04\x67\x17\x44\x28\xb1\xbd\xb4\x9a\x21\x36\xdc\xc8\x74\x8a\xdb\x11\x0f\x18\x5b\x76\xde\xd8\xd8\x60\xf1\xe9\xef\x02\x22\xe7\x77\xfe\x5a\xfd\xe6\xef\xdd\x1b\xf7\x9f\x71\x77\x96\xa7\xc4\xf8\x72\x0f\x31\x31\x29\x2a\x72\xc6\xcc\xef\x8a\xcf\x5c\x57\xe3\xda\x5e\xde\xdb\x7c\x7f\xd9\x3d\x81\xdb\x03\x2b\xc5\x0a\x67\xf6\xc1\x38\x0b\xd7\x4c\x1a\x2b\x57\xa7\xf1\x46\x29\xb0\x82\x8c\x1f\x2b\x28\x68\x34\x2d\xd3\x59\xfa\x89\x61\xe9\x2e\x7e\xca\xcb\x0f\x0e\x41\x6a\x26\x6a\x92\xad\x61\xac\x89\xcb\x15\x06\x02\x26\xf4\xfd\x9c\x5f\xfe\xfa\x7d\xe8\x23\x2f\x5f\xcb\xc5\x6f\xc9\x9c\x5f\x57\x2b\xca\xf4\x2f\x00\x00\xff\xff\x76\xbc\xce\x2f\x7e\x02\x00\x00")

func templatesSwagger_json_embedGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSwagger_json_embedGotmpl,
		"templates/swagger_json_embed.gotmpl",
	)
}

func templatesSwagger_json_embedGotmpl() (*asset, error) {
	bytes, err := templatesSwagger_json_embedGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/swagger_json_embed.gotmpl", size: 638, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTuplefieldGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesTuplefieldGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTuplefieldGotmpl,
		"templates/tuplefield.gotmpl",
	)
}

func templatesTuplefieldGotmpl() (*asset, error) {
	bytes, err := templatesTuplefieldGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tuplefield.gotmpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTupleserializerGotmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x5a\x5f\x6f\xdc\xb8\x11\x7f\xb6\x3e\xc5\x74\xe1\x73\xa5\x74\x23\x37\x46\x9f\x72\x70\x01\xe7\x92\xeb\xf9\x80\xb3\x0f\xc9\x5d\xfb\x60\x18\x39\xae\xc4\xb5\xe9\x68\x29\x85\xa4\xec\x6c\x05\x7d\xf7\x62\x48\xfd\xa1\x44\x6a\x57\x4e\xed\xa0\x40\xf3\x10\x58\x12\xc5\x99\xf9\xcd\x9f\xdf\x0c\xb5\x55\x05\x29\x5d\x33\x4e\x61\xa1\xca\x22\xa3\x1f\xa8\x60\x24\x63\xff\xa6\x62\x01\x75\x1d\x1c\x1f\xc3\xef\x7c\x43\x84\xbc\x25\xd9\xcf\x1f\x2e\x2f\xa0\x6c\xaf\x24\xa8\x5b\x26\x41\xbf\x04\x6a\x5b\x50\x58\x8b\x7c\x03\x04\xf4\x32\x22\x04\xd9\x06\xeb\x92\x27\x10\x56\x55\xfc\x9e\x26\x94\xdd\x53\x71\x41\x36\xb4\xae\xe1\x45\x55\x41\x41\x64\xa2\x05\x41\x8c\x77\xa1\xae\xa3\xa1\xa8\x50\x90\x07\xb8\xba\x5e\x6d\x15\x8d\x80\x0a\x91\x0b\xa8\x02\x80\xe3\x63\x90\x8a\xdc\x50\x78\xb5\x84\x1b\xaa\x40\xdd\x52\x23\x0d\x56\xa5\x82\xbb\x52\x5a\xb7\x02\x80\x7b\x22\xcc\xfa\x57\x70\x75\x7d\x27\x73\x1e\xbf\x27\x0f\xbf\x50\x29\xc9\x0d\x0d\x00\x56\xe5\x1a\x5e\x9f\x02\x0a\x91\xf1\x05\x7d\x78\x53\xae\xd7\x54\xa0\xe8\x28\x00\x48\x69\x82\x4f\xf5\x6b\x17\xf4\xe1\x2d\x4d\xf2\x94\x8a\x70\x55\xae\x9b\xa7\xf1\xef\x92\x5e\x94\x9b\x15\x15\x61\x14\x04\x00\x6c\x8d\x9a\xe2\x3b\xf8\xd0\xac\x0f\x8f\x8c\xfc\xe8\x7b\xfd\xec\x4f\xa7\xc0\x59\xa6\x4d\x01\x10\x54\x95\x82\xe3\xfd\x00\xa0\x0e\x6c\xf3\x4e\xaa\x0a\xb7\x8b\xcf\xd2\x94\x29\x96\x73\x92\x9d\x2b\xba\x91\xe8\x14\x63\x55\x46\xa4\x3a\xe7\x29\xfd\x02\x8c\xab\x00\xa0\xaa\x80\xf2\xd4\x3c\xaf\x2a\x10\x84\xdf\x50\x38\x64\xe9\x97\x25\x1c\xde\x93\x0c\x95\x8a\x7f\x15\x79\x41\x85\x62\x14\xf7\x61\x6b\xc8\x28\x0f\x1b\xed\xe0\xef\xf8\x16\xae\x87\xba\x6e\xd4\x43\x74\x5c\x70\xcc\x0b\x57\xfd\xea\xeb\x48\xaf\xde\x8d\x96\x8b\x17\xde\xf3\x02\x66\x2c\x0f\x79\xae\xb4\xe6\xf1\xb9\xbc\x28\xb3\x8c\xac\x32\x1a\x41\x5d\x1f\x75\x86\xa2\x06\xf8\xdc\x8e\x2e\xa8\xeb\x78\x10\x5d\x7a\x45\x1b\x61\x1e\x17\x8c\x9c\x00\x50\x1b\xf1\x87\x7e\xe4\xc1\xc2\xfd\xd4\x42\xac\xaa\x28\x4f\xf5\x8a\xda\xf5\xc5\xa4\x1f\x1d\x17\x74\x9b\xff\xe5\x55\xa3\xdf\x3a\x17\xf0\x71\x09\x8d\x07\x8d\x57\x1b\x0f\x58\x8b\x5f\x5f\x77\xe6\x60\x6c\xa8\x9c\xa4\x29\x4a\x56\x74\x53\x64\x44\x51\x58\xc8\xe4\x96\x6e\xc8\x6f\xdb\x82\x2e\x26\x94\x99\xf6\xf8\x3d\xc9\xa2\x66\xc1\x3e\x27\xfb\xdd\xbc\xd3\xd1\xe8\xe7\xb1\x46\x96\xcf\x07\x2e\xd7\x86\xf9\xdd\xe8\x38\xd2\xb8\x02\xff\x55\x15\xc4\xff\x24\x59\x49\xdf\x7d\x29\x04\x95\x92\xe5\x1c\x83\xfc\x14\x48\x51\x50\x9e\x86\xfe\xe7\x4b\x03\xa3\xb1\xc0\xf1\x6c\x23\x8c\xb3\x2c\xa8\x03\xac\x93\xbf\x58\x55\x72\xb2\x46\x32\xae\xf2\x79\x35\x72\xa2\x44\x5a\x52\xc2\x08\x42\x53\x1f\x97\xa6\x3e\x46\x1a\x8b\x94\x28\x82\x38\x5f\x5d\x33\xae\xa8\x58\x93\x84\x56\x75\x65\x17\x85\x61\x19\x70\x44\xc7\x5e\xd1\x4b\xdb\x78\xd8\x17\xd8\x6d\xd4\xf6\x31\x8b\x18\x8f\x9d\xec\xf1\x89\xf1\xa6\xb6\xa1\x73\x0f\x5e\x2d\xe1\x3e\xf2\x24\x57\xe3\x05\x1d\x8e\x0d\x34\x7a\x79\x14\xd4\x41\xbf\xce\x22\xb9\x5b\x22\xdf\x32\x99\x08\xb6\x61\x9c\x28\x9a\x3e\x96\xef\xf2\xd5\x1d\x4d\x14\x3c\x30\x75\x0b\x04\x8a\x3c\xdb\x6e\x72\x51\xdc\xb2\xc4\xe5\x40\xa9\x44\x99\xa8\x52\xd0\x67\xe1\x41\x4c\x73\x0d\xd3\x20\xcb\x51\xaf\xbc\x54\x6f\x88\xa4\x98\xea\x6f\xf2\x74\xbb\x80\xd8\x60\xf5\x4d\xb8\x4e\x83\xef\xe4\xe7\x81\x4b\x74\x26\x7a\x72\x01\xf1\xb9\x6c\xd5\xc5\xbf\x3f\x94\x2b\xfd\x67\x53\x92\xd0\xcc\x15\x91\x74\x68\xe6\xcf\xa5\xf4\xdb\x38\x55\xc1\x1a\x23\x8d\x99\x8f\xe0\xa8\x69\x92\x3a\x42\xad\xe6\x11\xca\x20\x66\x07\x89\x78\x96\x65\x97\xeb\x56\x73\xab\x1a\x5a\x90\xd4\x56\x11\xf3\xa5\x6f\x57\xfd\xbc\x80\x86\xcd\x76\xef\xbe\x14\xb9\x50\x34\x8d\xec\x37\x00\x08\xca\xf7\xa7\x7b\x6b\x72\x17\x8b\x55\x85\xd9\x7e\x2e\xcf\xb0\x6c\x69\xf2\xb5\xde\x32\xf9\xfc\x8f\xbc\x51\xf9\x43\xc6\x12\x5a\x55\x34\x93\x74\xbc\xb2\x5b\xd3\x30\x66\x38\x76\x15\x46\x90\xbf\x04\x45\x4b\x10\x25\x57\x6c\x43\x63\x4c\x8c\x1f\x72\x2e\xcb\x0d\xba\x29\xb2\x4c\x6a\x9c\xd5\xb8\xe4\xe8\xa8\xbd\x62\x79\xfc\xee\xf2\x47\x8b\x2d\xbc\x8c\x61\xb3\xc6\xb0\xd2\xb8\xd7\x23\x92\x77\x9b\x2f\x8f\xa3\x8c\x93\x08\x4f\x21\x6c\x3d\xad\xf1\x84\x68\xd2\xe9\x09\xd9\xd0\xbd\xae\xb1\x70\x75\x00\xc5\xd8\xdf\x87\xdc\x6c\xd4\x26\x38\x16\xed\xcf\x24\x6d\x8d\xeb\xcc\xf2\x1a\x85\x39\xed\x33\x0c\x06\x76\xec\xec\x48\xba\x7c\xde\x9b\xd1\x13\x39\x0d\x50\x72\xac\xd8\xe9\xe5\xea\x0e\xb1\xdc\x90\x4f\x34\xdc\x90\xe2\x4a\x2a\xc1\xf8\x8d\xcd\x9d\x3b\x5b\x98\xa3\x7e\x9b\x47\xb7\x25\x6c\xdd\x2a\x31\x91\x82\xf9\x27\x94\xd6\x4b\xc0\x9e\xbb\x10\x8c\xab\x35\x2c\xbe\xfb\xbc\xe8\x56\x5e\x7f\x8f\x4b\x7b\x89\x6c\x0d\x32\x4b\xdc\x4d\x9d\x3d\xbd\x72\xe3\x70\xd0\x3a\x44\xa3\xcd\x3b\x72\x97\x59\xf2\xce\x6e\x4a\x7d\x12\x7b\x4a\x6f\xff\xc9\x2c\xc1\x10\x5c\xc2\xc7\x8e\x6e\x5a\xe2\xd6\x1b\x46\xe3\xd5\x97\xab\x3b\x7f\xc4\x8f\x6a\x8e\x13\xf7\x8d\xa4\x59\x55\xe3\x91\x75\x63\xa2\x72\xd8\xb5\x63\x2a\x7b\x07\x5d\xa7\x27\xb7\x8d\xc5\x91\xb7\x1e\xd5\x4e\xce\xb9\xf5\xa7\x69\x0d\x04\x95\x65\xa6\xfc\x5d\xe4\x80\x83\x0e\x3f\x2e\xe1\xb0\x20\x82\x72\xa5\x47\x44\x0f\x25\x35\x8f\x77\xb3\xd2\x70\xd2\x6c\x5f\xd9\x45\x55\x9c\x76\xcb\xac\x96\x2c\x17\x3f\x32\x9a\xa5\x83\xb9\x2d\x18\x40\x8a\x1a\x99\xb1\xb0\x65\xb5\xe1\x12\x68\x8c\x8f\x6d\x80\xed\xed\x8c\x80\x53\xdd\x57\x4c\x0f\x8b\x43\xa1\xba\xba\x7d\x9d\x18\x97\x64\x77\x88\xe1\xe9\x08\x28\x57\x30\x5b\xef\xd1\x1c\xc3\xb6\xd7\xcd\xbf\x26\x8c\x46\x21\x7d\xfc\x02\x2e\x72\x73\x76\xa2\x3b\xd9\x07\xfa\x67\x41\x21\xcb\xf3\x4f\x8c\xdf\x60\xca\xc7\xf0\xe2\x78\x82\x3c\x73\xa1\xf3\x2e\xfc\xdb\xc9\xc9\x12\x16\x8c\xdf\x93\x8c\xe1\xf8\xd9\x09\xac\x6b\x1c\x60\x4b\xfa\x1a\xbe\xfb\xbc\x58\xee\x51\xdf\x1f\xfb\xfb\xb9\x78\x00\xd4\x7f\x11\x97\x4d\x70\xb9\xb1\xfe\xf4\x3e\xf7\xfa\x77\x9f\xeb\xe0\x14\xdc\x1e\x69\x72\xfb\xa7\xed\x5f\x7a\xdd\x4c\x33\x68\x81\xe4\x2b\x67\x1a\x8e\xde\x48\x6f\x35\xea\x87\xca\x53\x98\xbb\x6f\xbf\xe5\x44\xb7\x68\x6d\x6b\x5b\x87\x03\xd7\xf8\xb8\x08\xda\x64\xe9\xc7\xc9\x39\x43\xfd\x9e\x41\xb0\x1f\xf3\xf7\x8f\x81\x5f\x37\xea\xeb\xc3\x27\x61\xdb\x82\xe5\x7b\x64\x5c\x70\xa0\x07\xa8\x57\x4b\x58\x9d\x34\x43\xa4\xb9\x85\xec\xa6\x77\x0a\x0e\xf0\x29\x5e\x8e\xd8\x78\xdf\x5c\x79\x29\x2e\x72\xde\x56\x60\x33\x80\x45\xc1\xc1\x90\x46\xab\xe0\xe0\xa0\xc7\x54\x8b\x09\x0e\xea\xe0\x60\x75\x32\x4f\xa4\x2d\xef\x8c\xa7\x5f\x2f\xb0\xb9\x27\x1f\xc8\x4d\xfc\x43\xce\x13\xa2\x34\xac\x06\x98\x68\xd9\x78\xdc\x7b\x62\xa0\x53\x79\x78\x4c\x30\x0b\xf9\xb9\x47\x09\xdf\xee\xc8\x60\xe7\xdc\x39\x4c\xf6\xee\x74\xc1\x68\xd4\x71\x45\x55\x39\xa5\xc1\xe5\xf5\xa9\x09\x76\xb8\xe4\x70\x07\x81\x57\x55\x1f\x07\x85\x60\xf7\x46\x8b\x35\x56\x13\x6b\xd4\xdf\x51\x43\xc1\x93\x54\x26\xd3\x26\x4e\x44\xb1\x10\xfc\x81\xc1\xf8\x7a\x81\x35\xa2\xaf\x33\xad\x41\xef\xe9\xe7\x92\x09\xad\xea\x32\xdf\x30\xdc\x46\x6d\xbb\x80\x59\xfc\xe1\xf0\xf8\x00\x17\x33\x09\xff\xcf\xe0\x30\xfa\x10\xf2\xac\x96\x5b\xd7\x0e\xff\x60\xdc\xfd\x44\x64\x7f\x2e\xe8\xe3\xe5\x7e\x66\x1e\x22\x35\xb4\xcc\xb7\x87\x4b\x17\xf3\xdf\xe9\xa8\xcb\x70\x93\x35\x1a\xce\x39\x56\x1f\xd8\xd1\xc2\xfb\xb2\xc1\xca\x0b\xc3\xe4\x91\xbc\xdf\xfc\xf6\x60\xa7\x39\x2e\x8b\x46\xb4\xef\x35\xd2\x0c\x4c\xc3\x26\xc1\x13\x35\xb3\x5e\x1f\xc1\x73\x35\x0b\x95\xd6\xb2\x31\x20\x23\x48\xf4\x7f\xfd\xb4\xad\x8b\xf6\x7b\x4a\xd2\xb6\xb4\x2d\x61\xe2\x98\xd1\x99\xcb\xf4\x4e\x7b\xce\x63\x86\x95\x7c\xea\xf8\xdb\xdb\x74\xd9\x58\xee\xe8\xa6\xfa\x9a\x78\xc6\x73\xbe\xdd\xe4\x65\x2b\xbf\x39\x09\xb9\x27\x82\xe3\x4e\xd3\x07\x21\x3d\x1a\x4e\x8b\x54\xd7\x8f\x3a\x07\x3a\xf2\xc8\x8b\xfa\x28\xf0\xa2\x3d\xf5\x8a\xb6\x71\xbe\x17\x7c\x1f\xea\x30\xa7\x8a\x5f\x49\xf2\x09\xcb\x50\xab\xfc\x62\xd1\xb5\x83\x63\xb9\x63\xa8\x7d\x5f\x03\x1e\xd1\xbe\x3d\x7f\x9b\xd6\x9d\x62\x7f\x2c\x88\x50\x12\xae\xae\x9b\x36\xec\x09\xf8\xd8\xcb\xc6\x3b\x49\x78\x92\x76\xf6\x32\xcd\xae\x2e\xfe\x79\x99\x75\x40\x2a\x03\x2a\x7d\x36\x6b\x9e\x94\x1f\xc7\xfa\xe3\xdf\x8f\x64\xc2\xff\x57\x0a\x9c\xcd\x7d\xb3\x38\x6b\x3f\x06\xcf\x47\x71\x2e\xc1\xed\xa0\xa5\x69\xa6\x69\x7e\x73\x30\x8b\xb2\x9c\x52\x89\x1a\xbd\xd5\xdf\x52\x6d\x66\xfd\x97\x60\x8a\xea\xea\x65\x3e\x9c\x3a\x67\xa1\xc3\x9a\xde\x8d\x55\xad\x1d\x4d\x5d\xeb\x8e\x35\xcd\xf5\xb2\x93\x16\xf9\x4a\xf6\x34\x25\x7a\x6a\xfe\x94\xbe\x13\x48\x4c\x53\xca\xd3\x19\xe7\x63\xc4\x9d\xd4\x04\x13\x13\xa8\xd9\x30\x8e\x63\xcf\x10\x6a\x4f\xa1\x26\xdc\x46\x5f\xab\x51\xc4\xcb\xa6\x1d\x18\x7d\x37\xb5\x30\xfe\x89\xf8\xcf\x6d\xfb\x58\xde\xf5\x51\x3c\x1e\x1e\x17\x75\xfd\x4d\xf3\xb5\x27\x3e\x97\xbf\xe9\x9f\x37\xf4\xab\xfa\x7d\x9d\x5f\x94\xc5\xe0\x79\x7f\x57\xf7\x3f\xd8\x8e\x78\x16\x4e\xec\xce\x53\x78\x69\xff\xfa\xc6\xc6\xe0\xa5\x6f\xef\x19\x10\x20\xd6\xf6\x47\xae\xf0\x46\x41\x98\x51\xde\xd0\x77\x04\x7f\x8d\xc6\xa5\x09\x22\xbf\x34\xe7\x4c\xc1\x55\xbd\x0f\x83\xff\x04\x00\x00\xff\xff\x4a\xa2\x7a\x16\xa3\x27\x00\x00")

func templatesTupleserializerGotmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTupleserializerGotmpl,
		"templates/tupleserializer.gotmpl",
	)
}

func templatesTupleserializerGotmpl() (*asset, error) {
	bytes, err := templatesTupleserializerGotmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tupleserializer.gotmpl", size: 10147, mode: os.FileMode(420), modTime: time.Unix(1517521234, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/additionalpropertiesserializer.gotmpl": templatesAdditionalpropertiesserializerGotmpl,
	"templates/docstring.gotmpl": templatesDocstringGotmpl,
	"templates/header.gotmpl": templatesHeaderGotmpl,
	"templates/model.gotmpl": templatesModelGotmpl,
	"templates/modelvalidator.gotmpl": templatesModelvalidatorGotmpl,
	"templates/schema.gotmpl": templatesSchemaGotmpl,
	"templates/schemabody.gotmpl": templatesSchemabodyGotmpl,
	"templates/schematype.gotmpl": templatesSchematypeGotmpl,
	"templates/schemavalidator.gotmpl": templatesSchemavalidatorGotmpl,
	"templates/structfield.gotmpl": templatesStructfieldGotmpl,
	"templates/swagger_json_embed.gotmpl": templatesSwagger_json_embedGotmpl,
	"templates/tuplefield.gotmpl": templatesTuplefieldGotmpl,
	"templates/tupleserializer.gotmpl": templatesTupleserializerGotmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"additionalpropertiesserializer.gotmpl": &bintree{templatesAdditionalpropertiesserializerGotmpl, map[string]*bintree{}},
		"docstring.gotmpl": &bintree{templatesDocstringGotmpl, map[string]*bintree{}},
		"header.gotmpl": &bintree{templatesHeaderGotmpl, map[string]*bintree{}},
		"model.gotmpl": &bintree{templatesModelGotmpl, map[string]*bintree{}},
		"modelvalidator.gotmpl": &bintree{templatesModelvalidatorGotmpl, map[string]*bintree{}},
		"schema.gotmpl": &bintree{templatesSchemaGotmpl, map[string]*bintree{}},
		"schemabody.gotmpl": &bintree{templatesSchemabodyGotmpl, map[string]*bintree{}},
		"schematype.gotmpl": &bintree{templatesSchematypeGotmpl, map[string]*bintree{}},
		"schemavalidator.gotmpl": &bintree{templatesSchemavalidatorGotmpl, map[string]*bintree{}},
		"structfield.gotmpl": &bintree{templatesStructfieldGotmpl, map[string]*bintree{}},
		"swagger_json_embed.gotmpl": &bintree{templatesSwagger_json_embedGotmpl, map[string]*bintree{}},
		"tuplefield.gotmpl": &bintree{templatesTuplefieldGotmpl, map[string]*bintree{}},
		"tupleserializer.gotmpl": &bintree{templatesTupleserializerGotmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

